1.指针给指针赋值时，如果是两个不同含义的指针，new一个*p,然后传内容
 why：
 防止指针指向同一个地方，改变对方的内容
 how：
 char *p=new char[n];
 or:char *p;p=new char[n];
 delete []p;一般放在析构函数中

 2.实参数组传入函数中，形参为指针
 int IsRight(array);

 3.调用构造函数：
 再创建一个对象，用另一个对象赋初值

 4.||返回前面的值，&&返回后面的值

 5.在原本的类产生对象上进行更改，用拷贝构造函数

 2.string
 头文件：string.h(C++ cstring)
 格式：strlen （字符数组名）
 功能：计算字符串s的（unsigned int型）长度，不包括’\0’在内
 说明：返回s的长度，不包括结束符NULL

 3.cin可以直接输入一个字符串，自动补'\0'
 遇 “空格”“回车”都结束
 char p[4];
 cin>>p;

 4.类中包含对象：成员对象
 构造函数和不含对象成员的构造函数有所不同
 class CXaa
 {
    类名1 成员名1； //即成员名1是在类1中定义的
    类名2 成员名2； //成员名2是在类2中定义的
    ...
 };
 CXaa（参数表0）：成员名1（参数表1）,成员名2（参数表2）,...,成员名n（参数表n）//注意初始化对象成员时用对象名，不用类名
 {
   //函数体
 };
 当调用构造函数CXaa::CXaa()时，首先按各对象成员在类定义中的顺序依次调用它们的构造函数，对这些对象初始化，最后再执行CXaa::CXaa()的函数体
 如果这个类有成员对象，则要先执行成员对象自己所属类的构造函数，当全部成员对象都执行了自身类的构造函数后，再执行当前类的构造函数。
 当自定义了构造函数时就不会自动生成缺省构造函数，
 如果对象未初始化，就会自动调用缺省构造函数，所以在不初始化对象但又定义了有参构造函数时，要再定义一个缺省的构造函数，否则报错

 原文链接：https://blog.csdn.net/rhzwan123/article/details/2105205

 5.new数组：开辟动态数组空间
 int(*p)[Column] = new int[size][Column]; //编译出错！！！
 开辟空间：
 对于一个数：
 		类型* 名字 = new 类型； //申请的该段内存没有进行任何操作；
 		类型* 名字 = new 类型(); //将该段内存初始化为0；
   		类型* 名字 = new 类型(初始化值)； //将该段内存初始化为一个确定的值；

 对于一个数组：
 		类型* 名字 = new 类型[数组大小]；
 		类型* 名字 = new 类型[数组大小](初始化值)； //该数组的所有元素都赋值为一个确定的值；
 		类型* 名字 = new 类型[数组大小]();  //该数组的所有元素都赋值为0；

 释放空间：
 	delete 名字； //一个数；
 	delete[] 名字; //一个数组；

 6.类的对象不能直接访问类声明的私有成员变量
 (1)通过公共函数为私有成员赋值,访问
 （2）利用指针访问私有数据成员
 (4)利用引用访问私有数据成员
 https://blog.csdn.net/QTVLC/article/details/82108217